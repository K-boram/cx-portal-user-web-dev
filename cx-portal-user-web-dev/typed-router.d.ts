/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'unplugin-vue-router/types'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/[...all]': RouteRecordInfo<'/[...all]', '/:all(.*)', { all: ParamValue<true> }, { all: ParamValue<false> }>,
    '/dev-login': RouteRecordInfo<'/dev-login', '/dev-login', Record<never, never>, Record<never, never>>,
    '/example/axios': RouteRecordInfo<'/example/axios', '/example/axios', Record<never, never>, Record<never, never>>,
    '/example/chart': RouteRecordInfo<'/example/chart', '/example/chart', Record<never, never>, Record<never, never>>,
    '/example/chat-input-example': RouteRecordInfo<'/example/chat-input-example', '/example/chat-input-example', Record<never, never>, Record<never, never>>,
    '/example/code-mirror-example': RouteRecordInfo<'/example/code-mirror-example', '/example/code-mirror-example', Record<never, never>, Record<never, never>>,
    '/example/confirm': RouteRecordInfo<'/example/confirm', '/example/confirm', Record<never, never>, Record<never, never>>,
    '/example/custom-datepicker': RouteRecordInfo<'/example/custom-datepicker', '/example/custom-datepicker', Record<never, never>, Record<never, never>>,
    '/example/custom-input': RouteRecordInfo<'/example/custom-input', '/example/custom-input', Record<never, never>, Record<never, never>>,
    '/example/editor-example': RouteRecordInfo<'/example/editor-example', '/example/editor-example', Record<never, never>, Record<never, never>>,
    '/example/file': RouteRecordInfo<'/example/file', '/example/file', Record<never, never>, Record<never, never>>,
    '/example/grid-example': RouteRecordInfo<'/example/grid-example', '/example/grid-example', Record<never, never>, Record<never, never>>,
    '/example/icon-image-example': RouteRecordInfo<'/example/icon-image-example', '/example/icon-image-example', Record<never, never>, Record<never, never>>,
    '/example/modal': RouteRecordInfo<'/example/modal', '/example/modal', Record<never, never>, Record<never, never>>,
    '/example/pagination': RouteRecordInfo<'/example/pagination', '/example/pagination', Record<never, never>, Record<never, never>>,
    '/example/progress-bar': RouteRecordInfo<'/example/progress-bar', '/example/progress-bar', Record<never, never>, Record<never, never>>,
    '/example/select-box': RouteRecordInfo<'/example/select-box', '/example/select-box', Record<never, never>, Record<never, never>>,
    '/example/toast': RouteRecordInfo<'/example/toast', '/example/toast', Record<never, never>, Record<never, never>>,
    '/example/tree': RouteRecordInfo<'/example/tree', '/example/tree', Record<never, never>, Record<never, never>>,
    '/example/tree-grid-example': RouteRecordInfo<'/example/tree-grid-example', '/example/tree-grid-example', Record<never, never>, Record<never, never>>,
    '/home': RouteRecordInfo<'/home', '/home', Record<never, never>, Record<never, never>>,
    '/ixi-solution-intro/api-reference': RouteRecordInfo<'/ixi-solution-intro/api-reference', '/ixi-solution-intro/api-reference', Record<never, never>, Record<never, never>>,
    '/ixi-solution-intro/overview': RouteRecordInfo<'/ixi-solution-intro/overview', '/ixi-solution-intro/overview', Record<never, never>, Record<never, never>>,
    '/ixi-studio/guide': RouteRecordInfo<'/ixi-studio/guide', '/ixi-studio/guide', Record<never, never>, Record<never, never>>,
    '/mgmt/document-management': RouteRecordInfo<'/mgmt/document-management', '/mgmt/document-management', Record<never, never>, Record<never, never>>,
    '/mgmt/project/': RouteRecordInfo<'/mgmt/project/', '/mgmt/project', Record<never, never>, Record<never, never>>,
    '/mgmt/project/[project-id]': RouteRecordInfo<'/mgmt/project/[project-id]', '/mgmt/project/:project-id', { project-id: ParamValue<true> }, { project-id: ParamValue<false> }>,
    '/mgmt/project/create': RouteRecordInfo<'/mgmt/project/create', '/mgmt/project/create', Record<never, never>, Record<never, never>>,
    '/mgmt/prompt/': RouteRecordInfo<'/mgmt/prompt/', '/mgmt/prompt', Record<never, never>, Record<never, never>>,
    '/mgmt/prompt/setting': RouteRecordInfo<'/mgmt/prompt/setting', '/mgmt/prompt/setting', Record<never, never>, Record<never, never>>,
    '/mgmt/service-chat': RouteRecordInfo<'/mgmt/service-chat', '/mgmt/service-chat', Record<never, never>, Record<never, never>>,
    '/solution-question/': RouteRecordInfo<'/solution-question/', '/solution-question', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
    '/user/': RouteRecordInfo<'/user/', '/user', Record<never, never>, Record<never, never>>,
    '/user/service-chat/': RouteRecordInfo<'/user/service-chat/', '/user/service-chat', Record<never, never>, Record<never, never>>,
  }
}
